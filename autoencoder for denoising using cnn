import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam

# Load and prepare the MNIST dataset
(x_train, _), (x_test, _) = mnist.load_data()
x_train = x_train[:5000]  # Reduce size for speed
x_test = x_test[:1000]

# Normalize and reshape to (batch, height, width, channels)
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = np.reshape(x_train, (-1, 28, 28, 1))
x_test = np.reshape(x_test, (-1, 28, 28, 1))

# Add Gaussian noise
noise_factor = 0.5
x_train_noisy = np.clip(x_train + noise_factor * np.random.normal(0.0, 1.0, x_train.shape), 0., 1.)
x_test_noisy = np.clip(x_test + noise_factor * np.random.normal(0.0, 1.0, x_test.shape), 0., 1.)

# -------------------------
# Build the autoencoder
# -------------------------
input_img = Input(shape=(28, 28, 1))

# Encoder
x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
encoded = MaxPooling2D((2, 2), padding='same')(x)

# Decoder
x = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)
x = UpSampling2D((2, 2))(x)
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)
autoencoder.compile(optimizer=Adam(), loss='binary_crossentropy')

# Train autoencoder
autoencoder.fit(
    x_train_noisy, x_train,
    epochs=5,
    batch_size=128,
    shuffle=True,
    validation_data=(x_test_noisy, x_test)
)

# -------------------------
# Generate denoised images
# -------------------------
x_train_denoised = autoencoder.predict(x_train_noisy)
x_test_denoised = autoencoder.predict(x_test_noisy)

# -------------------------
# Prepare labeled data for classifier
# -------------------------
# 1 = noisy, 0 = denoised
X_classify_train = np.concatenate([x_train_noisy, x_train_denoised], axis=0)
y_classify_train = np.concatenate([np.ones(len(x_train)), np.zeros(len(x_train))], axis=0)

X_classify_test = np.concatenate([x_test_noisy, x_test_denoised], axis=0)
y_classify_test = np.concatenate([np.ones(len(x_test)), np.zeros(len(x_test))], axis=0)

# -------------------------
# Build classifier model
# -------------------------
classifier = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary output
])

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train classifier
classifier.fit(X_classify_train, y_classify_train, epochs=5, batch_size=128, validation_data=(X_classify_test, y_classify_test))

# -------------------------
# Predict and show results
# -------------------------
predictions = classifier.predict(X_classify_test[:10])

plt.figure(figsize=(12, 2))
for i in range(10):
    ax = plt.subplot(1, 10, i + 1)
    plt.imshow(X_classify_test[i].reshape(28, 28), cmap="gray")
    label = "Noisy" if predictions[i] > 0.5 else "Denoised"
    plt.title(label, fontsize=8)
    plt.axis("off")
plt.tight_layout()
plt.show()
