PROGRAM:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
def sigmoid(x):
    return 1 / (1 + np.exp(-x))
def sigmoid_deriv(x):
    return x * (1 - x)
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
column_names = ["Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin",
                "BMI", "DiabetesPedigreeFunction", "Age", "Outcome"]
df = pd.read_csv(url, header=None, names=column_names)
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values.reshape(-1, 1)
scaler = StandardScaler()
X = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
input_dim = X.shape[1]
hidden_dim = 10
output_dim = 1
lr = 0.1
epochs = 10000
np.random.seed(42)
W1 = np.random.randn(input_dim, hidden_dim)
b1 = np.zeros((1, hidden_dim))
W2 = np.random.randn(hidden_dim, output_dim)
b2 = np.zeros((1, output_dim))
loss_history = []
for epoch in range(epochs):
    # Forward pass
    z1 = np.dot(X_train, W1) + b1
    a1 = sigmoid(z1)
    z2 = np.dot(a1, W2) + b2
    a2 = sigmoid(z2)
    loss = -np.mean(y_train * np.log(a2 + 1e-8) + (1 - y_train) * np.log(1 - a2 + 1e-8))
    loss_history.append(loss)
    d_a2 = a2 - y_train
    d_W2 = np.dot(a1.T, d_a2)
    d_b2 = np.sum(d_a2, axis=0, keepdims=True)
    d_a1 = np.dot(d_a2, W2.T) * sigmoid_deriv(a1)
    d_W1 = np.dot(X_train.T, d_a1)
    d_b1 = np.sum(d_a1, axis=0, keepdims=True)
    W2 -= lr * d_W2 / len(X_train)
    b2 -= lr * d_b2 / len(X_train)
    W1 -= lr * d_W1 / len(X_train)
    b1 -= lr * d_b1 / len(X_train)
  if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {loss:.4f}")
def predict(X):
    a1 = sigmoid(np.dot(X, W1) + b1)
    a2 = sigmoid(np.dot(a1, W2) + b2)
    return (a2 > 0.5).astype(int)
y_pred = predict(X_test)
acc = accuracy_score(y_test, y_pred)
print("Test Accuracy:", acc)
plt.plot(loss_history)
plt.title('Training Loss Curve (Pima Indians Diabetes Dataset)')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.grid(True)
plt.show()



